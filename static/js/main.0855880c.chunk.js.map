{"version":3,"sources":["kelp.png","components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Business","className","href","this","props","business","url","target","rel","src","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSortByChange","handleSearch","enterSearch","sortByOption","event","setState","console","log","value","searchYelp","headsupContainer","document","createElement","headsup","belowSubmitButton","querySelector","setAttribute","textContent","style","cssText","append","setTimeout","removeChild","Object","keys","sortByOptionValue","getSortByClass","onClick","keyCode","preventDefault","renderSortByOptions","onChange","placeholder","onKeyUp","Yelp","search","a","fetch","headers","Authorization","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","renderMap","index","window","getElementsByTagName","script","parentNode","insertBefore","loadScript","initMap","mapboxgl","accessToken","Map","container","center","zoom","type","geometry","coordinates","properties","description","haircut","forEach","marker","el","Marker","setLngLat","setPopup","Popup","offset","setHTML","addTo","isLoading","mapView","handleClick","then","length","p","noresults","prevProps","prevState","visibility","buttonStatus","textDecoration","color","kelp","height","width","display","justifyContent","marginTop","position","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0855880c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kelp.062a796b.png\";","import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n              <div className=\"image-container\">\n              <a href={this.props.business.url} target=\"_blank\" rel=\"noopener noreferrer\"><img src={this.props.business.imageSrc} alt=''/></a>\n              </div>\n              <h2>{this.props.business.name}</h2>\n              <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                  <a href={`https://www.google.com/maps/search/?api=1&query=${this.props.business.address}+${this.props.business.city}`} target=\"_blank\" rel=\"noopener noreferrer\"><p>{this.props.business.address}</p>\n                  <p>{this.props.business.city}</p>\n                  <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p></a>\n                </div>\n                <div className=\"Business-reviews\">\n                  <h3>{this.props.business.category.toUpperCase()}</h3>\n                  <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n                  <p>{`${this.props.business.reviewCount} reviews`}</p>\n                </div>\n              </div>\n            </div>\n        )\n    }\n};\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\n\nfunction BusinessList (props) {\n    return (\n        <div className=\"BusinessList\">\n            {props.businesses.map(business => <Business business={business} key={business.id}/> )}\n        </div>\n    )\n}\n\n// class BusinessList extends React.Component {\n\n//     // componentDidMount() {\n//     //     console.log(\"BusinessList did mount\")\n//     // }\n\n//     render() {\n//         return (\n//             <div className=\"BusinessList\">\n//                 {this.props.businesses.map(business => <Business business={business} key={business.id}/> )}\n//             </div>\n//         );\n//     }\n// }\n\nexport default BusinessList;","import React from \"react\";\nimport './SearchBar.css';\n\n// Auto location populator\n\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {term: '', location: '', sortBy: 'best_match'};\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        };\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSortByChange = this.handleSortByChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.enterSearch = this.enterSearch.bind(this);\n    };\n    \n    getSortByClass(sortByOption) {              /* This returns CSS class for providing visual feedback to users */\n        return this.state.sortBy === sortByOption ? 'active' : '';\n    };\n\n    handleSortByChange(sortByOption, event) {          /* This sets the state of a sorting option for communicating with Yelp API */\n        this.setState({sortBy: sortByOption});\n        console.log(sortByOption)\n        if (this.state.term && this.state.location) {\n            console.log(`sort option changed to ${sortByOption}`)\n            this.handleSearch();\n        }\n    };\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n        // Yelp.autoComplete(event.target.value, this.autoLocate().latitude, this.autoLocate().longitude);\n    };\n\n    handleLocationChange(event) {\n\n        this.setState({location: event.target.value});\n    };\n\n    // componentDidMount() {\n    //     const coors = navigator.geolocation.getCurrentPosition(function(position) {\n    //         // console.log(position)\n    //         console.log(position.coords.latitude + ', ' + position.coords.longitude)\n    //         return position.coords.latitude + ', ' + position.coords.longitude\n    //     })\n    //     console.log(this.state.location)\n    //     console.log(coors)\n    //     this.setState({location: coors})\n    // }\n\n    handleSearch(event) {\n\n        // loading animation take 1:\n        // let loading = document.querySelector('.SearchBar-submit');\n        // let p = document.createElement('p');\n        // p.textContent = \"LOADING...\";\n        // p.style.cssText = \"position: absolute; top: 67%; left: 50%; margin-left: -40px; margin-top: -50px; z-index: -1;\"\n        // loading.append(p);\n\n        if (!this.state.term || !this.state.location) {\n            let headsupContainer = document.createElement('div');\n            let headsup = document.createElement('p');\n            let belowSubmitButton = document.querySelector('.SearchBar-submit');\n            headsupContainer.setAttribute('style', 'display: flex; justify-content: center; position: absolute; width: 100%; margin-top: 35px;')\n            headsup.textContent = \"Must fill in all fields! 🧐\";\n            headsup.style.cssText = \"color: white; background: red; width: 300px; padding: 7px; border-radius: 7px; opacity: 0.9; display: flex; justify-content: center; font-size: 1.1rem\";\n            headsupContainer.append(headsup)\n            belowSubmitButton.append(headsupContainer);\n            setTimeout(() => {\n                belowSubmitButton.removeChild(headsupContainer);\n            }, 5000);\n        } else {\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        }\n        // document.querySelector('.termInput').value = \"\"\n        // document.querySelector('.locationInput').value = \"\"\n        // event.preventDefault();\n    };\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\n        });\n    };\n\n    enterSearch(event) {\n        if (event.keyCode === 13) {\n            this.handleSearch();\n            event.preventDefault();\n        }\n    };\n\n    render() {\n\n        // let locationInput = document.querySelector('.locationInput');\n        // if (this.state.location) {\n        //     console.log(locationInput.value)\n        // }\n        // if (this.state.location) {\n        //     console.log(this.state.location)\n        // }\n\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input className=\"termInput\" onChange={this.handleTermChange} placeholder=\"Search Businesses\" onKeyUp={this.enterSearch}/>\n                    <input className=\"locationInput\" onChange={this.handleLocationChange} placeholder=\"Where?\" onKeyUp={this.enterSearch} value={this.state.location ? this.state.location : ''}/>\n                </div>\n                <div className=\"SearchBar-submit\" >\n                    <button onClick={this.handleSearch}>Let's Go</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","const apiKey = 'pNUUtdTjrkfUQQ6oulCCXktMcftn4rR1VUc2uKWt0uxxqOeoHUUvzS_CorL4NtLvK_TDzR7xYaNYy7W8umfbNPPKdHexEmhvZs9mZl1blmePnovnY9AT2CirAR_tXnYx';\n\nconst Yelp = {\n    search: async (term, location, sortBy) => {\n            /* to bypass the CORS restriction, use CORS Anywhere */\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        })\n        const jsonResponse = await response.json()\n        if (jsonResponse.businesses) {\n            return jsonResponse.businesses.map(business => {    \n                return {\n                    id: business.id,                            /* https://www.yelp.com/developers/documentation/v3/business_search */\n                    imageSrc: business.image_url,\n                    url: business.url,\n                    name: business.name,\n                    address: business.location.address1,\n                    city: business.location.city,\n                    state: business.location.state,\n                    zipCode: business.location.zip_code,\n                    category: business.categories[0].title,\n                    rating: business.rating,\n                    reviewCount: business.review_count\n                }\n            }); \n        }\n    }\n};\n\n\n\n\n\n\n// const Yelp = {\n//     search(term, location, sortBy) {\n//             /* to bypass the CORS restriction, use CORS Anywhere */\n//         return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n//             headers: {\n//                 Authorization: `Bearer ${apiKey}`\n//             }\n//         }).then(response => {\n//             return response.json()\n//         }).then(jsonResponse => {\n//             if (jsonResponse.businesses) {\n//                 // console.log(jsonResponse.businesses)\n//                 return jsonResponse.businesses.map(business => {    \n//                     return {\n//                         id: business.id,                            /* https://www.yelp.com/developers/documentation/v3/business_search */\n//                         imageSrc: business.image_url,\n//                         url: business.url,\n//                         name: business.name,\n//                         address: business.location.address1,\n//                         city: business.location.city,\n//                         state: business.location.state,\n//                         zipCode: business.location.zip_code,\n//                         category: business.categories[0].title,\n//                         rating: business.rating,\n//                         reviewCount: business.review_count\n//                     }\n//                 }); \n//             }\n//         });\n//     },   \n\n//     // autoComplete(text, latitude, longitude) {\n//     //     return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/autocomplete?text=${text}&latitude=${latitude}&longitude=${longitude}`, {\n//     //         headers: {\n//     //             Authorization: `Bearer ${apiKey}`\n//     //         }\n//     //     }).then(response => {\n//     //         return response.json();\n//     //     }).then(jsonResponse => {\n//     //         console.log(jsonResponse) \n//     //     })\n//     // }\n// };\n\n\n\n\nexport default Yelp;\n\n\n\n\n\n\n\n/* Example would be: (taken from App.js) */\n// const business = {\n//   imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n//   name: 'MarginOtto Pizzeria',\n//   address: '1010 Paddington Way',\n//   city: 'Flavortown',\n//   state: 'NY',\n//   zipCode: '10101',\n//   category: 'Italian',\n//   rating: 4.5,\n//   reviewCount: 90\n// };\n\n// const businesses = [\n//   business,\n//   business,\n//   business,\n//   business,\n//   business,\n//   business\n// ];","import React from 'react';\nimport kelp from '../../kelp.png';\nimport './reset.css'\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp'\nimport mapboxgl from 'mapbox-gl';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      businesses: [],\n      isLoading: '',\n      mapView: false\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  };\n\n\n  searchYelp(term, location, sortBy) {\n    this.setState({isLoading: true})\n\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: []})\n\n      if (!businesses || businesses.length < 1) {\n        let p = document.createElement('p');\n        let noresults = document.querySelector('.noresults');\n        p.textContent = \"No results found! 😱😢\";\n        p.style.cssText = \"color: white; background: red; padding: 20px; border-radius: 4px; text-align: center; width: 300px; font-size: 1.3rem\";\n        noresults.append(p);\n        console.log(\"NOTHING FOUND!\");\n        setTimeout(() => {\n          noresults.removeChild(p);\n        }, 5000);\n      } else {\n        this.setState({businesses: businesses});\n      }\n    });\n      // console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`)\n  };\n\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"App componentDidUpdate!\")\n    if (prevState.isLoading) {\n      this.setState({isLoading: false})\n    }\n  }\n\n  handleClick() {\n    this.setState({\n      mapView: !this.state.mapView\n    })\n    // console.log('clicked!', this.state.mapView)\n  }\n\n\n\n  /* GOOGLE MAP // LIFESAVER video: https://www.youtube.com/watch?v=W5LhLZqj76s (initMap is not a function error: because the script needs to look at the 'window' level. so at window.document.body.. etc. window.initMap = this.initMap)*/\n  componentDidMount() {\n    this.renderMap();\n\n  }\n\n  renderMap = () => {\n    loadScript(\"https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js\");\n    window.initMap = this.initMap;\n    window.initMap();\n  };\n\n  initMap = () => {\n    // var map = new window.google.maps.Map(document.getElementById('map'), {\n    //   center: {lat: -33.8688, lng: 151.2195},\n    //   zoom: 13\n    // });\n    \n    console.log('initMap running')\n    mapboxgl.accessToken = 'pk.eyJ1Ijoic3Rhbi1kZXYiLCJhIjoiY2tlYm9leWpjMGFpMjJ0cndybWdpbmVwMSJ9.I0CXw1DFG7WYKgyVm7x07A';\n    var map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-96, 37.8],\n      zoom: 3\n    });\n\n    var geojson = {\n      type: 'FeatureCollection',\n      features: [{\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.032, 38.913]\n        },\n        properties: {\n          title: 'Mapbox',\n          description: 'Washington, D.C.'\n        }\n      },\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-122.414, 37.776]\n        },\n        properties: {\n          title: 'Mapbox',\n          description: 'San Francisco, California',\n          haircut: 'bald'\n        }\n      }]\n    };\n    \n    // add markers to map\n    geojson.features.forEach(function(marker) {\n    \n    // create a HTML element for each feature\n    var el = document.createElement('div');\n    el.className = 'marker';\n    \n    // make a marker for each feature and add to the map\n    new mapboxgl.Marker(el)\n      .setLngLat(marker.geometry.coordinates)\n      new mapboxgl.Marker(el)\n      .setLngLat(marker.geometry.coordinates)\n      .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n      .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>' + marker.properties.haircut))\n      .addTo(map);\n      console.log(marker.properties)\n    });\n    \n  }\n\n\n\n  render() {\n\n    const mapView = this.state.mapView ? {visibility: \"visible\"} : {visibility: \"hidden\"};\n    // const mapView = this.state.mapView ? \"mapViewOn\" : \"mapViewOff\";\n    // document.querySelector('#map').classList.toggle('mapViewOn');\n    const buttonStatus = this.state.mapView ? \"Grid View\" : \"Map View\";\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"logo-container\">\n          <a href=\"/\" className=\"logo\" style={{textDecoration: 'none', color: \"white\"}}>\n            <span>kelp</span> \n            <img src={kelp} alt=\"kelp logo\" height=\"35px\"/>\n          </a>\n        </h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <div className=\"noresults\" style={{width: '100%', display: 'flex', justifyContent: 'center', marginTop: '30px', position: 'absolute'}}></div>\n        <div className=\"mapButtContainer\">\n          <button className=\"mapButton\" onClick={this.handleClick}>{buttonStatus}</button>\n        </div>\n        \n        {this.state.isLoading ? <div className=\"loader\"><img src=\"https://miro.medium.com/max/700/1*CsJ05WEGfunYMLGfsT2sXA.gif\" alt=\"icon\" /><p></p></div> : <BusinessList businesses={this.state.businesses}/>}\n\n        <div id='map' style={mapView} ></div>\n        {/* <div ref={el => this.mapContainer = el} style={mapView} className=\"mapContainer\" /> */}\n        \n\n        {/* <section style={mapView}>\n          <div className=\"pac-card\" id=\"pac-card\">\n            <div>\n              <div id=\"title\">\n                Autocomplete search\n              </div>\n              <div id=\"type-selector\" className=\"pac-controls\">\n                <input type=\"radio\" name=\"type\" id=\"changetype-all\" checked=\"checked\" />\n                <label htmlFor=\"changetype-all\">All</label>\n\n                <input type=\"radio\" name=\"type\" id=\"changetype-establishment\" />\n                <label htmlFor=\"changetype-establishment\">Establishments</label>\n\n                <input type=\"radio\" name=\"type\" id=\"changetype-address\" />\n                <label htmlFor=\"changetype-address\">Addresses</label>\n\n                <input type=\"radio\" name=\"type\" id=\"changetype-geocode\" />\n                <label htmlFor=\"changetype-geocode\">Geocodes</label>\n              </div>\n              <div id=\"strict-bounds-selector\" className=\"pac-controls\">\n                <input type=\"checkbox\" id=\"use-strict-bounds\" value=\"\" />\n                <label htmlFor=\"use-strict-bounds\">Strict Bounds</label>\n              </div>\n            </div>\n            <div id=\"pac-container\">\n              <input id=\"pac-input\" type=\"text\"\n                  placeholder=\"Enter a location\" />\n            </div>\n          </div>\n\n          <div id=\"map\"></div>\n          <div id=\"infowindow-content\">\n            <img src=\"\" width=\"16\" height=\"16\" id=\"place-icon\" />\n            <span id=\"place-name\"  className=\"title\"></span><br></br>\n            <span id=\"place-address\"></span>\n          </div>\n        </section> */}\n        \n        \n      </div>\n    );\n  }\n}\n\n\n// Loads the Google Maps API\nfunction loadScript(url) {\n  const index = window.document.getElementsByTagName(\"script\")[0];\n  // const head = window.document.getElementsByTagName('head')[0];\n  const script = window.document.createElement('script');\n  // script.type = \"text/javascript\"\n  script.src = url;\n  // script.async = true;\n  // script.defer = true;\n  // head.append(script);\n  index.parentNode.insertBefore(script, index);\n  console.log('script loaded')\n};\n\n\n\nexport default App;\n\n\n\n\n// https://www.codecademy.com/paths/build-web-apps-with-react/tracks/bwa-ajax-requests-and-api-interactions/modules/bwa-ravenous-part-four/projects/interacting-with-yelp-api","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}