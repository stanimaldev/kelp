{"version":3,"sources":["kelp.png","components/redux/store.js","components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/Map/Map.js","components/Loader/Loader.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","currentBusinessStore","createStore","currentBiz","action","type","payload","subscribe","console","log","getState","Business","business","clickOnBusiness","useSelector","state","dispatch","useDispatch","handleImageClick","e","setCurrentBiz","className","src","imageSrc","alt","coordinates","longitude","toFixed","onClick","href","url","target","rel","name","address","city","zipCode","category","toUpperCase","rating","reviewCount","BusinessList","props","style","businesses","map","key","id","SearchBar","useState","term","setTerm","location","setLocation","sortBy","setSortBy","sortByOptions","getSortByClass","sortByOption","handleSearch","searchYelp","warningContainer","document","createElement","warning","belowSubmitButton","querySelector","setAttribute","textContent","cssText","append","setTimeout","removeChild","enterSearch","preventDefault","keyCode","Object","keys","sortByOptionValue","handleSortByChange","onChange","value","placeholder","onKeyUp","Yelp","search","a","fetch","headers","Authorization","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","Map","clickedBusiness","mapOpen","setMapView","mapLoaded","setMapLoaded","setMap","currentMarkers","useRef","renderMap","useCallback","index","window","getElementsByTagName","script","parentNode","insertBefore","loadScript","initMap","mapboxgl","accessToken","container","center","zoom","on","resize","updateMarkers","geojson","features","geometry","latitude","properties","current","forEach","marker","remove","el","currentFeature","myMarker","Marker","flyToSpot","flyTo","setLngLat","setPopup","Popup","offset","setHTML","addTo","push","addEventListener","_lngLat","lng","useEffect","display","buttonStatus","dispatchEvent","Event","Loader","width","height","viewBox","xmlns","fill","strokeWidth","strokeLinecap","cx","cy","r","App","setBusinesses","isLoading","setIsLoading","setMapOpen","setClickedBusiness","windowSmall","setWindowSmall","viewPortWidth","innerWidth","documentElement","clientWidth","BusinessListWidth","textDecoration","color","kelp","then","length","p","noresults","justifyContent","marginTop","position","alignItems","Boolean","hostname","match","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.061b9c82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kelp.062a796b.png\";","import redux, {createStore} from \"redux\";\n\n// export Action Creator\nexport const setCurrentBiz = (e) => {\n  return {\n    type: \"BUSINESS_CLICKED\",\n    payload: e.target\n  }\n}\n\n\n// export Reducer\nexport const currentBusinessReducer = (currentBiz = \"default biz\", action) => {\n  switch(action.type) {\n    case \"BUSINESS_CLICKED\":\n      return currentBiz = action.payload\n    default: \n      return currentBiz\n  }\n}\n\n\n// Redux Store\nconst currentBusinessStore = createStore(currentBusinessReducer);\n\n\n// Subscribe Function\ncurrentBusinessStore.subscribe(() => console.log(currentBusinessStore.getState()))\n\n// Export the store\nexport default currentBusinessStore;","import React, { useDebugValue } from 'react';\nimport './Business.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport setCurrentBiz from '../redux/store';\n\nexport default function Business({ business, clickOnBusiness }) {  \n  const currentBiz = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const handleImageClick = (e) => {\n    dispatch(setCurrentBiz(e))\n    console.log(currentBiz, \"from Business Component!\")\n    // clickOnBusiness(e.target.alt)\n    // console.log(e.target.alt, \"from Business Component!\")\n  }\n\n  return (\n      <div className=\"Business\">\n        <div className=\"image-container\"> {/* -95.9255552 */}\n          <img src={business.imageSrc} alt={business.coordinates.longitude.toFixed(4)} onClick={() => handleImageClick}/>\n        </div>\n        <a href={business.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"Business-name\"><h2>{business.name}</h2></a>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <a href={`https://www.google.com/maps/search/?api=1&query=${business.address}+${business.city}`} target=\"_blank\" rel=\"noopener noreferrer\"><p>{business.address}</p>\n            <p>{business.city}</p>\n            <p>{`${business.state} ${business.zipCode}`}</p></a>\n          </div>\n          <div className=\"Business-reviews\">\n            {business.category ? <h3>{business.category.toUpperCase()}</h3> : null}\n            <h3 className=\"rating\">{`${business.rating} stars`}</h3>\n            <p>{`${business.reviewCount} reviews`}</p>\n          </div>\n        </div>\n      </div>\n    )\n}\n\n\n\n\n\n// class Business extends React.Component {\n//     render() {\n//         return (\n//             <div className=\"Business\">\n//               <div className=\"image-container\">\n//                 <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\n//               </div>\n//               <a href={this.props.business.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"Business-name\"><h2>{this.props.business.name}</h2></a>\n//               <div className=\"Business-information\">\n//                 <div className=\"Business-address\">\n//                   <a href={`https://www.google.com/maps/search/?api=1&query=${this.props.business.address}+${this.props.business.city}`} target=\"_blank\" rel=\"noopener noreferrer\"><p>{this.props.business.address}</p>\n//                   <p>{this.props.business.city}</p>\n//                   <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p></a>\n//                 </div>\n//                 <div className=\"Business-reviews\">\n//                   {this.props.business.category ? <h3>{this.props.business.category.toUpperCase()}</h3> : null}\n//                   <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n//                   <p>{`${this.props.business.reviewCount} reviews`}</p>\n//                 </div>\n//               </div>\n//             </div>\n//         )\n//     }\n// };\n\n// export default Business;","import React, {useEffect} from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\n\nfunction BusinessList (props) {\n\n    return (\n        <div className=\"BusinessList\" style={props.style}>\n            {props.businesses.map(business => <Business business={business} className=\"biz\" key={business.id} clickOnBusiness={props.clickOnBusiness}/> )}\n        </div>\n    )\n}\n\n// class BusinessList extends React.Component {\n\n//     // componentDidMount() {\n//     //     console.log(\"BusinessList did mount\")\n//     // }\n\n//     render() {\n//         return (\n//             <div className=\"BusinessList\">\n//                 {this.props.businesses.map(business => <Business business={business} key={business.id}/> )}\n//             </div>\n//         );\n//     }\n// }\n\nexport default BusinessList;","import React, {useState, useEffect} from \"react\";\nimport './SearchBar.css';\n\n// Auto location populator\n\n\n\n\nexport default function SearchBar(props) {\n    const [term, setTerm] = useState('');\n    const [location, setLocation] = useState('');\n    const [sortBy, setSortBy] = useState('best_match');\n\n    const sortByOptions = {\n        'Best Match': 'best_match',\n        'Highest Rated': 'rating',\n        'Most Reviewed': 'review_count'\n    }\n    \n    const getSortByClass = (sortByOption) => {\n        return sortBy === sortByOption ? 'active' : '';\n    };\n\n    const handleSortByChange = (sortByOption) => {\n        setSortBy(sortByOption);\n        console.log(sortByOption);\n        if (term && location) {\n            console.log(`sort option changed to ${sortByOption}`);\n            handleSearch();\n            // ghetto bandaid fix to the \"needing to double click sorting options for it to load new results with different sorting option applied\"\n            // setTimeout(() => {\n            //     handleSearch();\n            // }, 0);\n        }\n    };\n\n    const handleTermChange = (e) => {\n        setTerm(e.target.value)\n        // Yelp.autoComplete(event.target.value, this.autoLocate().latitude, this.autoLocate().longitude);\n    };\n\n    const handleLocationChange = (e) => {\n        setLocation(e.target.value);\n    };\n\n    const handleSearch = () => {\n        // Form Validation Warning\n        if (!term || !location) {\n            let warningContainer = document.createElement('div');\n            let warning = document.createElement('p');\n            let belowSubmitButton = document.querySelector('.SearchBar-submit');\n            warningContainer.setAttribute('style', 'display: flex; justify-content: center; position: absolute; width: 100%; margin-top: 35px;')\n            warning.textContent = \"Must fill in all fields! 🧐\";\n            warning.style.cssText = \"color: white; background: red; width: 300px; padding: 7px; border-radius: 7px; opacity: 0.9; display: flex; justify-content: center; font-size: 1.1rem\";\n            warningContainer.append(warning);\n            belowSubmitButton.append(warningContainer);\n            setTimeout(() => {\n                belowSubmitButton.removeChild(warningContainer);\n            }, 5000);\n        } else {\n            props.searchYelp(term, location, sortBy);\n        }\n    }\n\n    const renderSortByOptions = () => {\n        // console.log(sortByOptions)\n        return Object.keys(sortByOptions).map(sortByOption => {\n            let sortByOptionValue = sortByOptions[sortByOption];\n            return (<li \n                        key={sortByOptionValue} \n                        className={getSortByClass(sortByOptionValue)} \n                        onClick={() => handleSortByChange(sortByOptionValue)}\n                    >\n                        {sortByOption}\n                    </li>)\n        })\n        // return Object.keys(this.sortByOptions).map(sortByOption => {\n    //         let sortByOptionValue = this.sortByOptions[sortByOption];\n    //         return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\n    //     });\n    }\n\n    const enterSearch = (e) => {\n        e.preventDefault();\n        if (e.keyCode === 13) {\n            handleSearch();\n        }\n    }\n\n\n    return (\n        <div className=\"SearchBar\">\n            <div className=\"SearchBar-sort-options\">\n                <ul>\n                    {renderSortByOptions()}\n                </ul>\n            </div>\n            <div className=\"SearchBar-fields\">\n                <input className=\"termInput\" \n                    onChange={handleTermChange} \n                    placeholder=\"Search Businesses\"\n                    onKeyUp={enterSearch}\n                />\n                <input className=\"locationInput\" \n                    onChange={handleLocationChange} \n                    placeholder=\"Where?\" \n                    onKeyUp={enterSearch} \n                    value={location ? location : ''}\n                />\n            </div>\n            <div className=\"SearchBar-submit\" >\n                <button onClick={handleSearch}>Let's Go</button>\n            </div>\n        </div>\n    ) \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class SearchBar extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {term: '', location: '', sortBy: 'best_match'};\n    //     this.sortByOptions = {\n    //         'Best Match': 'best_match',\n    //         'Highest Rated': 'rating',\n    //         'Most Reviewed': 'review_count'\n    //     };\n    //     this.handleTermChange = this.handleTermChange.bind(this);\n    //     this.handleLocationChange = this.handleLocationChange.bind(this);\n    //     this.handleSortByChange = this.handleSortByChange.bind(this);\n    //     this.handleSearch = this.handleSearch.bind(this);\n    //     this.enterSearch = this.enterSearch.bind(this);\n    // };\n    \n    // getSortByClass(sortByOption) {              /* This returns CSS class for providing visual feedback to users */\n    //     return this.state.sortBy === sortByOption ? 'active' : '';\n    // };\n\n    // handleSortByChange(sortByOption, event) {          /* This sets the state of a sorting option for communicating with Yelp API */\n    //     this.setState({sortBy: sortByOption});\n    //     console.log(sortByOption)\n    //     if (this.state.term && this.state.location) {\n    //         console.log(`sort option changed to ${sortByOption}`)\n    //         this.handleSearch();\n    //         // ghetto bandaid fix to the \"needing to double click sorting options for it to load new results with different sorting option applied\"\n    //         setTimeout(() => {\n    //             this.handleSearch();\n    //         }, 0);\n    //     }\n    // };\n\n    // handleTermChange(event) {\n    //     this.setState({term: event.target.value});\n    //     // Yelp.autoComplete(event.target.value, this.autoLocate().latitude, this.autoLocate().longitude);\n    // };\n\n    // handleLocationChange(event) {\n\n    //     this.setState({location: event.target.value});\n    // };\n\n    // // componentDidMount() {\n    // //     const coors = navigator.geolocation.getCurrentPosition(function(position) {\n    // //         // console.log(position)\n    // //         console.log(position.coords.latitude + ', ' + position.coords.longitude)\n    // //         return position.coords.latitude + ', ' + position.coords.longitude\n    // //     })\n    // //     console.log(this.state.location)\n    // //     console.log(coors)\n    // //     this.setState({location: coors})\n    // // }\n\n    // handleSearch(event) {\n\n    //     // loading animation take 1:\n    //     // let loading = document.querySelector('.SearchBar-submit');\n    //     // let p = document.createElement('p');\n    //     // p.textContent = \"LOADING...\";\n    //     // p.style.cssText = \"position: absolute; top: 67%; left: 50%; margin-left: -40px; margin-top: -50px; z-index: -1;\"\n    //     // loading.append(p);\n\n    //     if (!this.state.term || !this.state.location) {\n    //         let headsupContainer = document.createElement('div');\n    //         let headsup = document.createElement('p');\n    //         let belowSubmitButton = document.querySelector('.SearchBar-submit');\n    //         headsupContainer.setAttribute('style', 'display: flex; justify-content: center; position: absolute; width: 100%; margin-top: 35px;')\n    //         headsup.textContent = \"Must fill in all fields! 🧐\";\n    //         headsup.style.cssText = \"color: white; background: red; width: 300px; padding: 7px; border-radius: 7px; opacity: 0.9; display: flex; justify-content: center; font-size: 1.1rem\";\n    //         headsupContainer.append(headsup)\n    //         belowSubmitButton.append(headsupContainer);\n    //         setTimeout(() => {\n    //             belowSubmitButton.removeChild(headsupContainer);\n    //         }, 5000);\n    //     } else {\n    //         this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n    //     }\n    //     // document.querySelector('.termInput').value = \"\"\n    //     // document.querySelector('.locationInput').value = \"\"\n    //     // event.preventDefault();\n    // };\n\n    // renderSortByOptions() {\n    //     return Object.keys(this.sortByOptions).map(sortByOption => {\n    //         let sortByOptionValue = this.sortByOptions[sortByOption];\n    //         return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\n    //     });\n    // };\n\n    // enterSearch(event) {\n    //     if (event.keyCode === 13) {\n    //         this.handleSearch();\n    //         event.preventDefault();\n    //     }\n    // };\n\n    // render() {\n\n        // let locationInput = document.querySelector('.locationInput');\n        // if (this.state.location) {\n        //     console.log(locationInput.value)\n        // }\n        // if (this.state.location) {\n        //     console.log(this.state.location)\n        // }\n\n        // return (\n        //     <div className=\"SearchBar\">\n        //         <div className=\"SearchBar-sort-options\">\n        //             <ul>\n        //                 {this.renderSortByOptions()}\n        //             </ul>\n        //         </div>\n        //         <div className=\"SearchBar-fields\">\n        //             <input className=\"termInput\" onChange={this.handleTermChange} placeholder=\"Search Businesses\" onKeyUp={this.enterSearch}/>\n        //             <input className=\"locationInput\" onChange={this.handleLocationChange} placeholder=\"Where?\" onKeyUp={this.enterSearch} value={this.state.location ? this.state.location : ''}/>\n        //         </div>\n        //         <div className=\"SearchBar-submit\" >\n        //             <button onClick={this.handleSearch}>Let's Go</button>\n        //         </div>\n        //     </div>\n        // )\n    // }\n// }\n\n// export default SearchBar;","const apiKey = 'pNUUtdTjrkfUQQ6oulCCXktMcftn4rR1VUc2uKWt0uxxqOeoHUUvzS_CorL4NtLvK_TDzR7xYaNYy7W8umfbNPPKdHexEmhvZs9mZl1blmePnovnY9AT2CirAR_tXnYx';\n\n/* https://www.yelp.com/developers/documentation/v3/business_search */\nconst Yelp = {\n    search: async (term, location, sortBy) => {\n            /* to bypass the CORS restriction, use CORS Anywhere */\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        })\n        const jsonResponse = await response.json()\n        if (jsonResponse.businesses) {\n            return jsonResponse.businesses.map(business => {    \n                return {\n                    id: business.id,                            \n                    imageSrc: business.image_url,\n                    url: business.url,\n                    name: business.name,\n                    address: business.location.address1,\n                    city: business.location.city,\n                    state: business.location.state,\n                    zipCode: business.location.zip_code,\n                    category: business.categories[0] ? business.categories[0].title : null,\n                    rating: business.rating,\n                    reviewCount: business.review_count,\n                    coordinates: business.coordinates\n                }\n            });\n        }\n    }\n};\n\n\n\n\n\n\n// const Yelp = {\n//     search(term, location, sortBy) {\n//             /* to bypass the CORS restriction, use CORS Anywhere */\n//         return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n//             headers: {\n//                 Authorization: `Bearer ${apiKey}`\n//             }\n//         }).then(response => {\n//             return response.json()\n//         }).then(jsonResponse => {\n//             if (jsonResponse.businesses) {\n//                 // console.log(jsonResponse.businesses)\n//                 return jsonResponse.businesses.map(business => {    \n//                     return {\n//                         id: business.id,                            /* https://www.yelp.com/developers/documentation/v3/business_search */\n//                         imageSrc: business.image_url,\n//                         url: business.url,\n//                         name: business.name,\n//                         address: business.location.address1,\n//                         city: business.location.city,\n//                         state: business.location.state,\n//                         zipCode: business.location.zip_code,\n//                         category: business.categories[0].title,\n//                         rating: business.rating,\n//                         reviewCount: business.review_count\n//                     }\n//                 }); \n//             }\n//         });\n//     },   \n\n//     // autoComplete(text, latitude, longitude) {\n//     //     return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/autocomplete?text=${text}&latitude=${latitude}&longitude=${longitude}`, {\n//     //         headers: {\n//     //             Authorization: `Bearer ${apiKey}`\n//     //         }\n//     //     }).then(response => {\n//     //         return response.json();\n//     //     }).then(jsonResponse => {\n//     //         console.log(jsonResponse) \n//     //     })\n//     // }\n// };\n\n\n\n\nexport default Yelp;\n\n\n\n\n\n\n\n/* Example would be: (taken from App.js) */\n// const business = {\n//   imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n//   name: 'MarginOtto Pizzeria',\n//   address: '1010 Paddington Way',\n//   city: 'Flavortown',\n//   state: 'NY',\n//   zipCode: '10101',\n//   category: 'Italian',\n//   rating: 4.5,\n//   reviewCount: 90\n// };\n\n// const businesses = [\n//   business,\n//   business,\n//   business,\n//   business,\n//   business,\n//   business\n// ];","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css';\nimport {useSelector} from 'react-redux';\n\nexport default function Map({ onClick, businesses, clickedBusiness }) {\n  const [mapOpen, setMapView] = useState(false);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [map, setMap] = useState();\n  let currentMarkers = useRef([]);\n\n  const currentBiz = useSelector(state => state);\n\n  const renderMap = useCallback(() => {\n    loadScript(\"https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js\");\n    window.initMap = initMap;\n    window.initMap();\n  }, []);\n  \n  // https://docs.mapbox.com/help/tutorials/building-a-store-locator/#make-the-map-interactive\n  \n  const initMap = () => {\n    // var map = new window.google.maps.Map(document.getElementById('map'), {\n    //   center: {lat: -33.8688, lng: 151.2195},\n    //   zoom: 13\n    // });\n    \n    // console.log('initMap running')\n    // console.log(businesses.map(business => Number(business.coordinates.longitude.toFixed(3))))\n    // console.log(businesses.map(business => business))\n    mapboxgl.accessToken = 'pk.eyJ1Ijoic3Rhbi1kZXYiLCJhIjoiY2tlYm9leWpjMGFpMjJ0cndybWdpbmVwMSJ9.I0CXw1DFG7WYKgyVm7x07A';\n    var map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-96, 37.8],\n      zoom: 3\n    });\n\n    map.on(\"load\", () => {\n      setMap(map);\n      map.resize();\n    })\n  }\n\n\n  const updateMarkers = useCallback((clickedBusiness) => {\n    var geojson = {\n      type: 'FeatureCollection',\n      features: businesses.map(business => {\n        return {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [business.coordinates.longitude, business.coordinates.latitude]\n          },\n          properties: {\n            title: business.name,\n            address: business.address,\n            city: business.city,\n            category: business.category,\n            url: business.url\n          }\n        }\n      })\n      \n      // [{\n      //   type: 'Feature',\n      //   geometry: {\n      //     type: 'Point',\n      //     coordinates: [-77.032, 38.913]\n      //   },\n      //   properties: {\n      //     title: 'Mapbox',\n      //     description: 'Washington, D.C.'\n      //   }\n      // },\n      // {\n      //   type: 'Feature',\n      //   geometry: {\n      //     type: 'Point',\n      //     coordinates: [-122.414, 37.776]\n      //   },\n      //   properties: {\n      //     title: 'Mapbox',\n      //     description: 'San Francisco, California',\n      //     haircut: 'bald'\n      //   }\n      // }]\n    };\n    // console.log(geojson);\n    \n\n    // remove previous markers\n    // setTimeout(() => {\n      if (currentMarkers.current !== businesses) {\n        currentMarkers.current.forEach(marker => marker.remove());\n        currentMarkers.current = [];\n        console.log(\"removeMarkers!\", currentMarkers)\n      }\n    // }, 2000);\n  \n\n    // add markers to map\n    geojson.features.forEach(function(marker) {\n    \n    // create a HTML element for each feature\n    var el = document.createElement('div');\n    el.className = 'marker';\n    \n\n\n    // make a marker for each feature and add to the map\n    let myMarker = new mapboxgl.Marker(el);\n    myMarker.setLngLat(marker.geometry.coordinates)\n    .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n    .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.city + '</p>' + marker.properties.category + '<a href=\"' + marker.properties.url + '\" target=\"_blank\"><p>Yelp Page</p><a>'))\n    .addTo(map);\n    currentMarkers.current.push(myMarker);\n    console.log(\"currentMarkers!\", currentMarkers);\n\n\n      function flyToArea(currentFeature) {\n        map.flyTo({\n          center: currentFeature.geometry.coordinates,\n          zoom: 10\n        });\n      }\n\n      flyToArea(marker);\n\n      function flyToSpot(currentFeature) {\n        map.flyTo({\n          center: currentFeature.geometry.coordinates,\n          zoom: 14\n        });\n      }\n      \n      el.addEventListener('click', function(e) {\n        flyToSpot(marker);\n        // console.log(marker.properties.address);\n        // console.log(\"ClickedBusiness: \", clickedBusiness)\n        console.log(currentMarkers.current[2]._lngLat.lng.toFixed(4));\n        console.log(\"clicked\", marker)\n      })\n\n      currentMarkers.current.forEach(marker => {\n        // if (marker._lngLat.lng.toFixed(4) === clickedBusiness) {\n        if (clickedBusiness) {\n          flyToSpot(marker);\n          console.log(\"clicked\", marker)\n        }\n      })\n\n    });\n\n  }, [businesses]);\n\n\n\n  // const removeMarkers = () => {\n\n  // }\n\n\n  useEffect(() => {\n    renderMap();\n    console.log(\"rendermap\")\n  }, [renderMap])\n\n\n  useEffect(() => {\n    // console.log(\"businesses Array\", businesses)\n    // removeMarkers();\n    updateMarkers();\n  }, [businesses])\n\n\n  function handleClick() {\n    console.log(currentBiz, \"map toggle\");\n    if (!mapLoaded) {\n      // renderMap();\n      setMapLoaded(true);\n    }\n    onClick();\n    setMapView(mapOpen => mapOpen = !mapOpen)\n    setTimeout(() => {\n      window.dispatchEvent(new Event('resize'))\n    }, 0)\n  }\n\n  // // Map box sticky scroll attempt 1: \n  // useEffect(() => {\n  //   // window.onload = function() {\n  //     window.onscroll = function() {stickyMap()};\n\n  //     // Get the header\n  //     var myMap = document.getElementById(\"mapContainer\");\n  //     // let myMap = document.querySelector('.mapComponent');\n\n  //     // Get the offset position of the navbar\n  //     let sticky = myMap.offsetTop;\n\n  //     // Add the sticky class to the header when you reach its scroll position. Remove \"sticky\" when you leave the scroll position\n  //     function stickyMap() {\n  //       if (window.pageYOffset > sticky) {\n  //         myMap.classList.add(\"sticky\");\n  //         console.log(\"yoyoyo!\")\n  //       } else {\n  //         myMap.classList.remove(\"sticky\");\n  //         console.log(\"up top!\")\n  //       }\n  //     }\n  //   // }\n  // }, [])\n\n  useEffect(() => {\n    const map = document.querySelector('#mapContainer');\n    const button = document.querySelector('.mapButton');\n    button.addEventListener('click', function() {\n      if (map.style.display === \"block\") {\n        map.style.display = \"none\";\n      } else {\n        map.style.display = \"block\";\n      }\n    })\n  }, [])\n\n\n  // const toggleMap = mapOpen ? {visibility: \"visible\", width: \"45%\", display: \"block\"} : {visibility: \"hidden\", width: \"0%\", display: \"none\"};\n  // const BusinessListWidth = this.state.mapOpen ? {width: \"45%\"} : {width: \"100%\"};\n  // const toggleMap = this.state.mapOpen ? {display: \"block\"} : {display: \"none\"};\n  // const toggleMap = this.state.mapOpen ? \"mapViewOn\" : \"mapViewOff\";\n  // document.querySelector('#map').classList.toggle('mapViewOn');\n  const buttonStatus = mapOpen ? \"Hide Map\" : \"Show Map\";\n\n  return (\n    <div className=\"mapBackground\">\n     <div className=\"mapButtContainer\">\n       <button className=\"mapButton\" onClick={handleClick}>{buttonStatus}</button>\n     </div>\n\n      <div id=\"mapContainer\">\n        <div id='map'></div>\n      </div>\n\n\n\n\n\n      {/* OLD GOOGLE MAPS JSX/HTML */}\n      {/* <div ref={el => this.mapContainer = el} style={mapOpen} className=\"mapContainer\" /> */}\n        \n\n        {/* <section style={mapView}>\n          <div className=\"pac-card\" id=\"pac-card\">\n            <div>\n              <div id=\"title\">\n                Autocomplete search\n              </div>\n              <div id=\"type-selector\" className=\"pac-controls\">\n                <input type=\"radio\" name=\"type\" id=\"changetype-all\" checked=\"checked\" />\n                <label htmlFor=\"changetype-all\">All</label>\n\n                <input type=\"radio\" name=\"type\" id=\"changetype-establishment\" />\n                <label htmlFor=\"changetype-establishment\">Establishments</label>\n\n                <input type=\"radio\" name=\"type\" id=\"changetype-address\" />\n                <label htmlFor=\"changetype-address\">Addresses</label>\n\n                <input type=\"radio\" name=\"type\" id=\"changetype-geocode\" />\n                <label htmlFor=\"changetype-geocode\">Geocodes</label>\n              </div>\n              <div id=\"strict-bounds-selector\" className=\"pac-controls\">\n                <input type=\"checkbox\" id=\"use-strict-bounds\" value=\"\" />\n                <label htmlFor=\"use-strict-bounds\">Strict Bounds</label>\n              </div>\n            </div>\n            <div id=\"pac-container\">\n              <input id=\"pac-input\" type=\"text\"\n                  placeholder=\"Enter a location\" />\n            </div>\n          </div>\n\n          <div id=\"map\"></div>\n          <div id=\"infowindow-content\">\n            <img src=\"\" width=\"16\" height=\"16\" id=\"place-icon\" />\n            <span id=\"place-name\"  className=\"title\"></span><br></br>\n            <span id=\"place-address\"></span>\n          </div>\n        </section> */}\n    </div>\n  )\n}\n\n\n// Loads the MapBox API script\nfunction loadScript(url) {\n  const index = window.document.getElementsByTagName(\"script\")[0];\n  // const head = window.document.getElementsByTagName('head')[0];\n  const script = window.document.createElement('script');\n  // script.type = \"text/javascript\"\n  script.src = url;\n  // script.async = true;\n  // script.defer = true;\n  // head.append(script);\n  index.parentNode.insertBefore(script, index);\n  console.log('script loaded')\n};","import React from 'react';\nimport './Loader.css';\n\nexport default function Loader() {\n  return (\n    <svg className=\"spinner\" width=\"65px\" height=\"65px\" viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle className=\"path\" fill=\"none\" strokeWidth=\"6\" strokeLinecap=\"round\" cx=\"33\" cy=\"33\" r=\"30\"></circle>\n    </svg>\n  )\n}\n\n\n\n","import React, {useState, useEffect} from 'react';\nimport kelp from '../../kelp.png';\nimport './reset.css'\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp'\nimport Map from '../Map/Map';\nimport Loader from '../Loader/Loader';\n// import MapButton from '../MapButton/MapButton';\n\n\nexport default function App() {\n  const [businesses, setBusinesses] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [mapOpen, setMapOpen] = useState(false);\n  const [clickedBusiness, setClickedBusiness] = useState();\n  const [windowSmall, setWindowSmall] = useState(false);\n  \n\n  function searchYelp(term, location, sortBy) {\n    setIsLoading(true);\n\n    Yelp.search(term, location, sortBy).then(businesses => {\n      setBusinesses([]);\n\n      if (!businesses || businesses.length < 1) {\n        let p = document.createElement('p');\n        let noresults = document.querySelector('.noresults');\n        p.textContent = \"No results found! 😱😢\";\n        p.style.cssText = \"color: white; background: red; padding: 10px; border-radius: 4px; text-align: center; width: 300px; font-size: 1.3rem\";\n        noresults.append(p);\n        console.log(\"NOTHING FOUND!\");\n        setTimeout(() => {\n          noresults.removeChild(p);\n        }, 5000);\n      } else {\n        setBusinesses([...businesses]);\n      }\n    });\n      // console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`)\n  };\n\n  useEffect(() => {\n    if (businesses) {\n      setIsLoading(false);\n    }\n  }, [businesses, setIsLoading])\n\n\n  // Map box sticky scroll attempt 1: \n  // useEffect(() => {\n  //   // window.onload = function() {\n  //     window.onscroll = function() {stickyMap()};\n  \n  //     // Get the header\n  //     // var myMap = document.getElementById(\"mapComponent\");\n  //     let myMap = document.querySelector('.scrollThis');\n  \n  //     // Get the offset position of the navbar\n  //     let sticky = myMap.offsetTop;\n  \n  //     // Add the sticky class to the header when you reach its scroll position. Remove \"sticky\" when you leave the scroll position\n  //     function stickyMap() {\n  //       if (window.pageYOffset > sticky) {\n  //         myMap.classList.add(\"sticky\");\n  //         console.log(\"yoyoyo!\")\n  //       } else {\n  //         myMap.classList.remove(\"sticky\");\n  //         console.log(\"up top!\")\n  //       }\n  //     }\n  //   // }\n  // }, [])\n\n\n  const toggleSearchResultsWidth = () => {\n    setMapOpen(mapOpen => !mapOpen);\n    // console.log(mapOpen);\n  }\n\n  const clickOnBusiness = (address) => {\n    setClickedBusiness(address);\n    // console.log(clickedBusiness, \"address set from App Component!\");\n  }\n\n\n\n  useEffect(() => {\n    window.addEventListener('resize', function() {\n        // console.log(window.innerWidth);\n        // console.log(document.documentElement.clientWidth)\n        let viewPortWidth = window.innerWidth || document.documentElement.clientWidth;\n        if (viewPortWidth < 900) {\n          setWindowSmall(true)\n        } if (viewPortWidth > 900){\n          setWindowSmall(false);\n        }\n        // console.log(windowSmall);\n    })\n  }, [windowSmall])\n\n  const BusinessListWidth = mapOpen && !windowSmall ? {width: \"50%\"} : {width: \"100%\"};\n\n  // const mapOpenStyle = mapOpen ? {visibility: \"visible\", width: \"45%\"} : {visibility: \"hidden\", width: \"0%\", display: \"none\"};\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"logo-container\">\n        <a href=\"/\" className=\"logo\" style={{textDecoration: 'none', color: \"white\"}}>\n          <span>kelp</span>\n          <img src={kelp} alt=\"kelp logo\" height=\"30px\"/>\n        </a>\n      </h1>\n      <SearchBar searchYelp={searchYelp}/>\n      <div className=\"noresults\" style={{width: '100%', display: 'flex', justifyContent: 'center', marginTop: '30px', position: 'absolute'}}></div>\n      {/* <div className=\"mapButtContainer\">\n        <button className=\"mapButton\" onClick={this.handleClick}>{buttonStatus}</button>\n      </div> */}\n\n\n      <div id=\"mapComponent\" className=\"sticky\">\n          <Map onClick={toggleSearchResultsWidth} businesses={businesses} clickedBusiness={clickedBusiness}/>\n      </div>\n      \n      <div style={BusinessListWidth} className=\"BizListContainer\">\n        {isLoading ? \n          <div className=\"loader\">\n            {/* <img src=\"https://miro.medium.com/max/700/1*CsJ05WEGfunYMLGfsT2sXA.gif\" alt=\"icon\" />\n            <p>LOADING...</p> */}\n            <Loader style={{display: 'flex', alignItems:\"center\", justifyContent: \"center\"}}/>\n          </div>\n        : <BusinessList businesses={businesses} clickOnBusiness={clickOnBusiness}\n          />\n        }\n      </div>\n\n\n\n\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class App extends React.Component {\n  // constructor(props){\n  //   super(props);\n  //   this.state = {\n  //     businesses: [],\n  //     isLoading: '',\n  //     mapOpen: false,\n  //     // mapLoaded: false\n  //   }\n  //   this.searchYelp = this.searchYelp.bind(this);\n  //   // this.handleClick = this.handleClick.bind(this);\n  // };\n\n\n  // searchYelp(term, location, sortBy) {\n  //   this.setState({isLoading: true})\n\n  //   Yelp.search(term, location, sortBy).then(businesses => {\n  //     this.setState({businesses: []})\n\n  //     if (!businesses || businesses.length < 1) {\n  //       let p = document.createElement('p');\n  //       let noresults = document.querySelector('.noresults');\n  //       p.textContent = \"No results found! 😱😢\";\n  //       p.style.cssText = \"color: white; background: red; padding: 20px; border-radius: 4px; text-align: center; width: 300px; font-size: 1.3rem\";\n  //       noresults.append(p);\n  //       console.log(\"NOTHING FOUND!\");\n  //       setTimeout(() => {\n  //         noresults.removeChild(p);\n  //       }, 5000);\n  //     } else {\n  //       this.setState({businesses: businesses});\n  //     }\n  //   });\n  //     // console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`)\n  // };\n\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.isLoading) {\n  //     this.setState({isLoading: false})\n  //   }\n  // }\n\n\n  /* GOOGLE MAP // LIFESAVER video: https://www.youtube.com/watch?v=W5LhLZqj76s (initMap is not a function error: because the script needs to look at the 'window' level. so at window.document.body.. etc. window.initMap = this.initMap)*/\n\n\n  // renderMap = () => {\n  //   loadScript(\"https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js\");\n  //   window.initMap = this.initMap;\n  //   window.initMap();\n  // };\n\n  // initMap = () => {\n  //   // var map = new window.google.maps.Map(document.getElementById('map'), {\n  //   //   center: {lat: -33.8688, lng: 151.2195},\n  //   //   zoom: 13\n  //   // });\n    \n  //   console.log('initMap running')\n  //   mapboxgl.accessToken = 'pk.eyJ1Ijoic3Rhbi1kZXYiLCJhIjoiY2tlYm9leWpjMGFpMjJ0cndybWdpbmVwMSJ9.I0CXw1DFG7WYKgyVm7x07A';\n  //   var map = new mapboxgl.Map({\n  //     container: 'map',\n  //     style: 'mapbox://styles/mapbox/streets-v11',\n  //     center: [-96, 37.8],\n  //     zoom: 3\n  //   });\n\n  //   var geojson = {\n  //     type: 'FeatureCollection',\n  //     features: [{\n  //       type: 'Feature',\n  //       geometry: {\n  //         type: 'Point',\n  //         coordinates: [-77.032, 38.913]\n  //       },\n  //       properties: {\n  //         title: 'Mapbox',\n  //         description: 'Washington, D.C.'\n  //       }\n  //     },\n  //     {\n  //       type: 'Feature',\n  //       geometry: {\n  //         type: 'Point',\n  //         coordinates: [-122.414, 37.776]\n  //       },\n  //       properties: {\n  //         title: 'Mapbox',\n  //         description: 'San Francisco, California',\n  //         haircut: 'bald'\n  //       }\n  //     }]\n  //   };\n    \n  //   // add markers to map\n  //   geojson.features.forEach(function(marker) {\n    \n  //   // create a HTML element for each feature\n  //   var el = document.createElement('div');\n  //   el.className = 'marker';\n    \n  //   // make a marker for each feature and add to the map\n  //   new mapboxgl.Marker(el)\n  //     .setLngLat(marker.geometry.coordinates)\n  //     new mapboxgl.Marker(el)\n  //     .setLngLat(marker.geometry.coordinates)\n  //     .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n  //     .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>' + marker.properties.haircut))\n  //     .addTo(map);\n  //     console.log(marker.properties)\n  //   });\n  // }\n\n\n  // toggleSearchResultsWidth = () => {\n  //   this.setState({mapOpen: !this.state.mapOpen});\n  //   console.log(this.state.mapOpen);\n  // }\n\n\n  // render() {\n    \n  //   const mapOpen = this.state.mapOpen ? {visibility: \"visible\", width: \"45%\"} : {visibility: \"hidden\", width: \"0%\", display: \"none\"};\n  //   const BusinessListWidth = this.state.mapOpen ? {width: \"45%\"} : {width: \"100%\"};\n  //   // const mapOpen = this.state.mapOpen ? {display: \"block\"} : {display: \"none\"};\n  //   // const mapOpen = this.state.mapOpen ? \"mapViewOn\" : \"mapViewOff\";\n  //   // document.querySelector('#map').classList.toggle('mapViewOn');\n  //   // const buttonStatus = this.state.mapOpen ? \"Grid View\" : \"Map View\";\n\n  //   return (\n  //     <div className=\"App\">\n  //       <h1 className=\"logo-container\">\n  //         <a href=\"/\" className=\"logo\" style={{textDecoration: 'none', color: \"white\"}}>\n  //           <span>kelp</span>\n  //           <img src={kelp} alt=\"kelp logo\" height=\"35px\"/>\n  //         </a>\n  //       </h1>\n  //       <SearchBar searchYelp={this.searchYelp}/>\n  //       <div className=\"noresults\" style={{width: '100%', display: 'flex', justifyContent: 'center', marginTop: '30px', position: 'absolute'}}></div>\n  //       {/* <div className=\"mapButtContainer\">\n  //         <button className=\"mapButton\" onClick={this.handleClick}>{buttonStatus}</button>\n  //       </div> */}\n        \n  //       <div className=\"bizAndMap\">\n  //         {this.state.isLoading ? \n  //           <div className=\"loader\">\n  //             <img src=\"https://miro.medium.com/max/700/1*CsJ05WEGfunYMLGfsT2sXA.gif\" alt=\"icon\" />\n  //             <p>LOADING...</p>\n  //             </div>\n  //           : <BusinessList style={BusinessListWidth} businesses={this.state.businesses}\n  //           />\n  //         }\n  //         <Map onClick={this.toggleSearchResultsWidth} style={mapOpen}/>\n  //         {/* <div id='map' style={mapOpen}></div> */}\n  //       </div>\n\n  //     </div>\n  //   );\n  // }\n// }\n\n// export default App;\n\n// https://www.codecademy.com/paths/build-web-apps-with-react/tracks/bwa-ajax-requests-and-api-interactions/modules/bwa-ravenous-part-four/projects/interacting-with-yelp-api ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport currentBusinessStore from '../src/components/redux/store';\n\nReactDOM.render(\n  <Provider store={currentBusinessStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}